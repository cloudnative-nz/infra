---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ghost-mysql
  namespace: ghost
  labels:
    app.kubernetes.io/component: primary
    app.kubernetes.io/instance: ghost
    app.kubernetes.io/name: mysql
spec:
  serviceName: ghost-mysql
  podManagementPolicy: ""
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: primary
      app.kubernetes.io/instance: ghost
      app.kubernetes.io/name: mysql
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
    - metadata:
        annotations: null
        labels:
          app.kubernetes.io/component: primary
          app.kubernetes.io/instance: ghost
          app.kubernetes.io/name: mysql
        name: data
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: 20Gi
        storageClassName: longhorn
  template:
    metadata:
      labels:
        app.kubernetes.io/component: primary
        app.kubernetes.io/instance: ghost
        app.kubernetes.io/name: mysql
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: ghost
                    app.kubernetes.io/name: mysql
                topologyKey: kubernetes.io/hostname
              weight: 1
      initContainers: null
      securityContext:
        fsGroup: 1001
      serviceAccountName: ghost-mysql
      volumes:
        - configMap:
            name: ghost-mysql
          name: config
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:8.0.33-debian-11-r17
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - mountPath: /bitnami/mysql
              name: data
            - mountPath: /opt/bitnami/mysql/conf/my.cnf
              name: config
              subPath: my.cnf
          envFrom: null
          resources:
            limits: {}
            requests: {}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: mysql-root-password
                  name: ghost-passwords
            - name: MYSQL_USER
              value: bn_ghost
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: mysql-password
                  name: ghost-passwords
            - name: MYSQL_DATABASE
              value: bitnami_ghost
          # readinessProbe:
          #   exec:
          #     command:
          #       - /bin/bash
          #       - -ec
          #       - |
          #         password_aux="${MYSQL_ROOT_PASSWORD:-}"
          #         if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
          #             password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
          #         fi
          #         mysqladmin status -uroot -p"${password_aux}"
          #   failureThreshold: 3
          #   initialDelaySeconds: 5
          #   periodSeconds: 10
          #   successThreshold: 1
          #   timeoutSeconds: 1
          # livenessProbe:
          #   exec:
          #     command:
          #       - /bin/bash
          #       - -ec
          #       - |
          #         password_aux="${MYSQL_ROOT_PASSWORD:-}"
          #         if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
          #             password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
          #         fi
          #         mysqladmin status -uroot -p"${password_aux}"
          #   failureThreshold: 3
          #   initialDelaySeconds: 5
          #   periodSeconds: 10
          #   successThreshold: 1
          #   timeoutSeconds: 1
          # startupProbe:
          #   exec:
          #     command:
          #       - /bin/bash
          #       - -ec
          #       - |
          #         password_aux="${MYSQL_ROOT_PASSWORD:-}"
          #         if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
          #             password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
          #         fi
          #         mysqladmin status -uroot -p"${password_aux}"
          #   failureThreshold: 10
          #   initialDelaySeconds: 15
          #   periodSeconds: 10
          #   successThreshold: 1
          #   timeoutSeconds: 1
