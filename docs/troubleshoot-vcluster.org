#+title: Troubleshoot vCluster / apisnoop
#+CREATOR: ii.nz
#+PROPERTY: header-args:shell :exports both
#+PROPERTY: header-args:shell+ :async true
#+PROPERTY: header-args:shell+ :eval no-export
#+PROPERTY: header-args:shell+ :var KUBECONFIG=(concat (getenv "HOME") "/.kube/config-cloudnative.nz")
#+PROPERTY: header-args:shell+ :var VCKUBECONFIG=(concat (getenv "HOME") "/.kube/config-" (getenv "USER") "-cloudnative.nz.conf")
#+PROPERTY: header-args:shell+ :var NAMESPACE=(getenv "USER")
#+PROPERTY: header-args:shell+ :prologue "exec 2>&1\nexport KUBECONFIG VCKUBECONFIG"
#+PROPERTY: header-args:shell+ :epilogue ":\n"
#+PROPERTY: header-args:tmux :session ":default"

* Summary

- We want provide a clear process to check (with tcpdump) if "live events" are getting sent to the apisnoop auditlogger.
- Using a debug container is the easiest option but it requires that the apisnoop pod not be a static pod.
- Testing it first with a kind before checking if it works with vcluster
- https://github.com/heyste/apisnoop/blob/debug-live-events/kind/kind%2Bapisnoop.yaml

* Custom kind/snoop setup
** boot cluster

#+begin_src tmux :results silent :session kind:boot
git clone --depth 1 --single-branch --branch debug-live-events https://github.com/heyste/apisnoop.git /tmp/debug-live-events
cd /tmp/debug-live-events/kind
kind create cluster --config kind+apisnoop.yaml
#+end_src

** check pods

#+begin_src tmux :results silent :session kind:pods
kubectl get pods -A -owide
#+end_src

** install apisnoop

#+begin_src tmux :results silent :session kind:boot
docker exec kind-control-plane kubectl apply -f /opt/apisnoop.yaml
#+end_src

** watch apisnoop start

#+begin_src tmux :results silent :session kind:pods
watch kubectl get pods -owide
#+end_src

** check svc

#+begin_src tmux :results silent :session kind:svc
kubectl get svc -A
#+end_src

** create kind-sink service

#+begin_src tmux :results silent :session kind:svc
kubectl create -n default -f - <<EOF
---
apiVersion: v1
kind: Service
metadata:
  name: kind-auditsink
spec:
  type: ClusterIP
  clusterIP: 10.96.96.96
  ports:
    - name: http
      port: 9900
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: apisnoop
  type: ClusterIP
EOF
#+end_src

** check svc

#+begin_src tmux :results silent :session kind:svc
kubectl get svc -A
#+end_src

** check endpoints

#+begin_src tmux :results silent :session kind:endpoints
kubectl get endpoints -A
#+end_src

** check yaml if needed
*** get apisnoop yaml

#+begin_src tmux :results silent :session kind:apisnoop
kubectl get pod apisnoop -oyaml | head -15
#+end_src

*** get svc kind-sink yaml

#+begin_src tmux :results silent :session kind:svc
kubectl get svc kind-auditsink -oyaml | head -15
#+end_src

** exec apisnoop pod
*** select result

#+begin_src tmux :results silent :session kind:exec
kubectl -n default exec apisnoop -c snoopdb -- psql --username apisnoop --host localhost -c 'select 1;'
#+end_src

*** check snoop tables

#+begin_src tmux :results silent :session kind:exec
kubectl -n default exec apisnoop -c snoopdb -- psql --username apisnoop --host localhost -c '\d+'
#+end_src

*** check for live events

#+begin_src tmux :results silent :session kind:exec
kubectl -n default exec apisnoop -c snoopdb -- psql --username apisnoop --host localhost -c 'select count(*) from testing.audit_event;'
#+end_src

*** display live event

#+begin_src tmux :results silent :session kind:exec
kubectl -n default exec apisnoop -c snoopdb -- psql --username apisnoop --host localhost -c 'select count(*) from testing.audit_event; select * from testing.audit_event limit 1;'
#+end_src

*** check auditlogger via debug container

- https://kccncna2022.sched.com/event/182Lh
- May need to run this twice

#+begin_src tmux :results silent :session kind:exec
kubectl -n default debug -it apisnoop --image=rochaporto/swiss-knife:latest --target=auditlogger -- ps aux | cat
#+end_src

*** scan for events from apiserver

- https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/

#+begin_src tmux :results silent :session kind:exec
kubectl -n default debug -it apisnoop --image=rochaporto/swiss-knife:latest --target=auditlogger -- tcpdump -i eth0 -s 0 -A 'tcp[((tcp[12:1] & 0xf0) >> 2):4] = 0x504F5354'
#+end_src

* Confirm remote cluster

#+begin_src shell :exports both
kubectl get nodes -owide
#+end_src

#+RESULTS:
#+begin_example
NAME   STATUS   ROLES           AGE   VERSION   INTERNAL-IP       EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME
srv1   Ready    control-plane   23d   v1.27.3   123.253.178.101   <none>        Ubuntu 22.04.2 LTS   5.15.0-76-generic   containerd://1.6.21
#+end_example

* Review vcluster state
** set VCKUBECONFIG

#+begin_src tmux :results silent :session vcluster:cluster
export VCKUBECONFIG=${HOME}/.kube/config-${USER}-cloudnative.nz.conf
echo $VCKUBECONFIG
#+end_src

** check pods

#+begin_src tmux :results silent :session vcluster:cluster
kubectl --kubeconfig $VCKUBECONFIG get pods -A
#+end_src

** check svc

#+begin_src tmux :results silent :session vcluster:cluster
kubectl --kubeconfig $VCKUBECONFIG get svc -A
#+end_src

** check auditlogger via debug container

- debug containers don't look to be working from inside of vcluster

#+begin_src tmux :results silent :session vcluster:cluster
export AUDITLOGGER=$(kubectl --kubeconfig $VCKUBECONFIG get pod -oname | grep audit | awk -F '/' '{print $2}')
echo $AUDITLOGGER
#+end_src

#+begin_src tmux :results silent :session vcluster:cluster
kubectl --kubeconfig $VCKUBECONFIG debug -it $AUDITLOGGER --image=rochaporto/swiss-knife:latest --target=auditlogger -- ps aux | cat
#+end_src

* Review host cluster state
** set KUBECONFIG

#+begin_src tmux :results silent :session cnnz:cluster
export CNNZ_KUBECONFIG=${HOME}/.kube/config-cloudnative.nz
echo $CNNZ_KUBECONFIG
#+end_src

** check svc

#+begin_src tmux :results silent :session cnnz:cluster
kubectl --kubeconfig $CNNZ_KUBECONFIG -n $USER get svc -owide
#+end_src

** check endpoints

#+begin_src tmux :results silent :session cnnz:cluster
kubectl --kubeconfig $CNNZ_KUBECONFIG -n $USER get endpoints -owide
#+end_src

** check pods

#+begin_src tmux :results silent :session cnnz:cluster
kubectl --kubeconfig $CNNZ_KUBECONFIG -n $USER get pods -owide
#+end_src

** find user's auditlogger

#+begin_src tmux :results silent :session cnnz:cluster
export USER_AUDITLOGGER=$(kubectl --kubeconfig $CNNZ_KUBECONFIG get pods -oname -n $USER | grep audit | awk -F '/' '{print $2}')
echo $USER_AUDITLOGGER
#+end_src

** check auditlogger with debug container

#+begin_src tmux :results silent :session cnnz:cluster
kubectl --kubeconfig $CNNZ_KUBECONFIG debug -it -n $USER $USER_AUDITLOGGER --image=rochaporto/swiss-knife:latest --target=auditlogger -- ps aux | cat
#+end_src

** check for live events for auditlogger

- Check for get requests

#+begin_src tmux :results silent :session cnnz:cluster
kubectl --kubeconfig $CNNZ_KUBECONFIG debug -it -n $USER $USER_AUDITLOGGER --image=rochaporto/swiss-knife:latest --target=auditlogger -- tcpdump -i eth0 -s 0 -A 'tcp[((tcp[12:1] & 0xf0) >> 2):4] = 0x47455420'
#+end_src

- "User-Agent: kube-probe/1.27" events are seen

** check for live events for auditlogger

- No post events found

#+begin_src tmux :results silent :session cnnz:cluster
kubectl --kubeconfig $CNNZ_KUBECONFIG debug -it -n $USER $USER_AUDITLOGGER --image=rochaporto/swiss-knife:latest --target=auditlogger -- tcpdump -i eth0 -s 0 -A 'tcp[((tcp[12:1] & 0xf0) >> 2):4] = 0x504F5354'
#+end_src

** find user's apiserver

#+begin_src tmux :results silent :session cnnz:cluster
export USER_APISERVER=$(kubectl --kubeconfig $CNNZ_KUBECONFIG get pods -oname -n $USER | grep $USER-api | awk -F '/' '{print $2}')
echo $USER_APISERVER
#+end_src

** list apiserver spec

#+begin_src tmux :results silent :session cnnz:cluster
kubectl --kubeconfig $CNNZ_KUBECONFIG -n $USER get pod $USER_APISERVER -oyaml | yq .spec
#+end_src

** check apiserver with debug container

#+begin_src tmux :results silent :session cnnz:cluster
kubectl --kubeconfig $CNNZ_KUBECONFIG -n $USER debug -it $USER_APISERVER --image=rochaporto/swiss-knife:latest --target=kube-apiserver -- ps aux | cat
#+end_src

** check apiserver with tcpdump

#+begin_src tmux :results silent :session cnnz:cluster
kubectl --kubeconfig $CNNZ_KUBECONFIG -n $USER debug -it $USER_APISERVER --image=rochaporto/swiss-knife:latest --target=kube-apiserver -- tcpdump -i eth0 -vvvS port 6443
#+end_src

** check apiserver for audit sink traffic

#+begin_src tmux :results silent :session cnnz:cluster
kubectl --kubeconfig $CNNZ_KUBECONFIG -n $USER debug -it $USER_APISERVER --image=rochaporto/swiss-knife:latest --target=kube-apiserver -- tcpdump -i eth0 -c10  port 9900
#+end_src

** debug user apiserver with bash

#+begin_src tmux :results silent :session cnnz:cluster
kubectl --kubeconfig $CNNZ_KUBECONFIG -n $USER debug -it $USER_APISERVER --image=rochaporto/swiss-knife:latest --target=kube-apiserver -- bash
#+end_src

#+begin_example
root@k8s-heyste-api-6ffbd56fc4-g4f8w:/# ps aux | cat
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root           1  8.9  0.2 1244388 448472 ?      Ssl  Aug08 171:49 kube-apiserver --advertise-address=0.0.0.0 --allow-privileged=true --authorization-mode=RBAC --client-ca-file=/run/config/pki/ca.crt --enable-bootstrap-token-auth=true --etcd-cafile=/run/config/pki/etcd-ca.crt --etcd-certfile=/run/config/pki/apiserver-etcd-client.crt --etcd-keyfile=/run/config/pki/apiserver-etcd-client.key --etcd-servers=https://k8s-heyste-etcd:2379 --proxy-client-cert-file=/run/config/pki/front-proxy-client.crt --proxy-client-key-file=/run/config/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/run/config/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/run/config/pki/sa.pub --service-account-signing-key-file=/run/config/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/run/config/pki/apiserver.crt --tls-private-key-file=/run/config/pki/apiserver.key --watch-cache=false --endpoint-reconciler-type=none --audit-policy-file=/etc/kubernetes/audit/policy.yaml --audit-webhook-config-file=/etc/kubernetes/audit/sink.yaml
#+end_example

#+begin_example
root@k8s-heyste-api-6ffbd56fc4-g4f8w:/proc/1/root# cat etc/kubernetes/audit/sink.yaml
apiVersion: v1
kind: Config
current-context: auditsink-context
clusters:
  - name: auditsink-cluster
    cluster:
      server: http://auditlogger-x-default-k8s-heyste.heyste:9900/events
contexts:
  - context:
      user: ""
      cluster: auditsink-cluster
    name: auditsink-context
users: []
preferences: {}
#+end_example

#+begin_example
root@k8s-heyste-api-6ffbd56fc4-g4f8w:/proc/1/root# apt update && apt install curl
#+end_example

#+begin_example
root@k8s-heyste-api-6ffbd56fc4-g4f8w:/proc/1/root# curl http://auditlogger-x-default-k8s-heyste.heyste:9900/events
curl: (6) Could not resolve host: auditlogger-x-default-k8s-heyste.heyste
#+end_example

#+begin_example
root@k8s-heyste-api-6ffbd56fc4-g4f8w:/proc/1/root# cat etc/resolv.conf
search heyste.svc.cluster.local svc.cluster.local cluster.local
nameserver 10.96.0.10
options ndots:5
#+end_example
