# ---
# apiVersion: source.toolkit.fluxcd.io/v1beta2
# kind: HelmRepository
# metadata:
#   name: bitnami
#   namespace: powerdns
# spec:
#   interval: 24h
#   url: https://charts.bitnami.com/bitnami
---
# https://artifacthub.io/packages/helm/bitnami/postgresql
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: pdns-db
  namespace: flux-system
spec:
  storageNamespace: flux-system
  targetNamespace: powerdns
  releaseName: pdns-db
  install:
    createNamespace: true
  maxHistory: 10
  interval: 30m
  chart:
    spec:
      chart: postgresql
      version: "12.8.3" # Current as of Augest 17th, 2023
      # version: "12.5.7" # Current as of June 15th, 2023
      sourceRef:
        kind: HelmRepository
        name: bitnami
        namespace: flux-system
      interval: 12h
  values:
    # https://github.com/bitnami/containers/tree/main/bitnami/postgresql
    # https://github.com/bitnami/charts/tree/main/bitnami/postgresql#parameters
    auth:
      existingSecret: powerdns
      secretKeys:
        adminPasswordKey: postgres_password
        userPasswordKey: postgres_password
    persistence:
      size: 10Gi
    # https://github.com/bitnami/charts/tree/main/bitnami/postgresql#initialize-a-fresh-instance
    # The Bitnami PostgreSQL image allows you to use your custom scripts to initialize a fresh instance.
    # In order to execute the scripts, you can specify custom scripts
    #    using the primary.initdb.scripts parameter as a string.
    # In addition, you can also set an external ConfigMap with all the initialization scripts.
    # This is done by setting the primary.initdb.scriptsConfigMap parameter.
    #    Note that this will override the two previous options.
    # If your initialization scripts contain sensitive information such as credentials or passwords,
    #     you can use the primary.initdb.scriptsSecret parameter.
    # The allowed extensions are .sh, .sql and .sql.gz.
    primary:
      initdb:
        # primary.initdb.scripts
        #   Dictionary of initdb scripts
        scripts:
          schema.sql: |
            CREATE TABLE domains (
              id                    SERIAL PRIMARY KEY,
              name                  VARCHAR(255) NOT NULL,
              master                VARCHAR(128) DEFAULT NULL,
              last_check            INT DEFAULT NULL,
              type                  TEXT NOT NULL,
              notified_serial       BIGINT DEFAULT NULL,
              account               VARCHAR(40) DEFAULT NULL,
              options               TEXT DEFAULT NULL,
              catalog               TEXT DEFAULT NULL,
              CONSTRAINT c_lowercase_name CHECK (((name)::TEXT = LOWER((name)::TEXT)))
            );
            CREATE UNIQUE INDEX name_index ON domains(name);
            CREATE INDEX catalog_idx ON domains(catalog);
            CREATE TABLE records (
              id                    BIGSERIAL PRIMARY KEY,
              domain_id             INT DEFAULT NULL,
              name                  VARCHAR(255) DEFAULT NULL,
              type                  VARCHAR(10) DEFAULT NULL,
              content               VARCHAR(65535) DEFAULT NULL,
              ttl                   INT DEFAULT NULL,
              prio                  INT DEFAULT NULL,
              disabled              BOOL DEFAULT 'f',
              ordername             VARCHAR(255),
              auth                  BOOL DEFAULT 't',
              CONSTRAINT domain_exists
              FOREIGN KEY(domain_id) REFERENCES domains(id)
              ON DELETE CASCADE,
              CONSTRAINT c_lowercase_name CHECK (((name)::TEXT = LOWER((name)::TEXT)))
            );
            CREATE INDEX rec_name_index ON records(name);
            CREATE INDEX nametype_index ON records(name,type);
            CREATE INDEX domain_id ON records(domain_id);
            CREATE INDEX recordorder ON records (domain_id, ordername text_pattern_ops);
            CREATE TABLE supermasters (
              ip                    INET NOT NULL,
              nameserver            VARCHAR(255) NOT NULL,
              account               VARCHAR(40) NOT NULL,
              PRIMARY KEY(ip, nameserver)
            );
            CREATE TABLE comments (
              id                    SERIAL PRIMARY KEY,
              domain_id             INT NOT NULL,
              name                  VARCHAR(255) NOT NULL,
              type                  VARCHAR(10) NOT NULL,
              modified_at           INT NOT NULL,
              account               VARCHAR(40) DEFAULT NULL,
              comment               VARCHAR(65535) NOT NULL,
              CONSTRAINT domain_exists
              FOREIGN KEY(domain_id) REFERENCES domains(id)
              ON DELETE CASCADE,
              CONSTRAINT c_lowercase_name CHECK (((name)::TEXT = LOWER((name)::TEXT)))
            );
            CREATE INDEX comments_domain_id_idx ON comments (domain_id);
            CREATE INDEX comments_name_type_idx ON comments (name, type);
            CREATE INDEX comments_order_idx ON comments (domain_id, modified_at);
            CREATE TABLE domainmetadata (
              id                    SERIAL PRIMARY KEY,
              domain_id             INT REFERENCES domains(id) ON DELETE CASCADE,
              kind                  VARCHAR(32),
              content               TEXT
            );

            CREATE INDEX domainidmetaindex ON domainmetadata(domain_id);
            CREATE TABLE cryptokeys (
              id                    SERIAL PRIMARY KEY,
              domain_id             INT REFERENCES domains(id) ON DELETE CASCADE,
              flags                 INT NOT NULL,
              active                BOOL,
              published             BOOL DEFAULT TRUE,
              content               TEXT
            );
            CREATE INDEX domainidindex ON cryptokeys(domain_id);
            CREATE TABLE tsigkeys (
              id                    SERIAL PRIMARY KEY,
              name                  VARCHAR(255),
              algorithm             VARCHAR(50),
              secret                VARCHAR(255),
              CONSTRAINT c_lowercase_name CHECK (((name)::TEXT = LOWER((name)::TEXT)))
            );
            CREATE UNIQUE INDEX namealgoindex ON tsigkeys(name, algorithm);
